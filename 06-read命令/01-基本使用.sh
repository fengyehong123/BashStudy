#!/usr/bin/env bash

# ---------------------------------------------------------------------------------------------------
# ⏹read命令
# 脚本在执行的过程中，通过read命令由用户提供一部分数据
# 该命令将用户的输入存入一个变量，方便后面的代码使用。用户按下回车键，就表示输入结束
#
# ⏹read命令的格式
#     read [-options] [variable...]
#
# ⏹options是参数选项，variable是用来保存输入数值的一个或多个变量名。
# 如果没有提供变量名，环境变量REPLY会包含用户输入的一整行数据。
# ---------------------------------------------------------------------------------------------------

# 使用 -n 选项，不输出结尾的换行符，保证提示文字和用户输入的文字在同一行上
echo -n "输入一些文本 > "
# ------------------------------------------------------
# 🔴-r 
#   raw 模式，表示不把用户输入的反斜杠字符解释为转义字符
# ------------------------------------------------------
# 将用户输出的值保存到 text 变量中
read -r text
echo -e "用户的输入：\e[1;31m $text \e[0m"

# ----------------------------------------------------------------------------------------------
# ⏹read可以接受用户输入的多个值
# read命令读取的值，默认是以👉空格👈分隔。
# 可以通过自定义环境变量IFS（内部字段分隔符，Internal Field Separator 的缩写），修改分隔标志。
# ----------------------------------------------------------------------------------------------
echo -n "输入一些内容，使用空格分隔 > "
# 将用户输入的内容读取到下面的两个变量中
read -r content1 content2
echo -e "输入的内容为：\e[1;31m $content1 和 $content2 \e[0m"

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# ---------------------------------------------------------------
# ⏹如果read命令之后没有定义变量名，那么环境变量REPLY会包含所有的输入。
# ---------------------------------------------------------------
echo -n "输入一些内容 > "
# 没有指定变量名
read -r
# 🔴环境变量 $REPLY 包含了用户的所有输入
echo -e "输入的内容为：\e[1;31m $REPLY \e[0m"

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# ---------------------------------------------------------------
# ⏹read命令还可以用来读取文件
# ---------------------------------------------------------------
cd 06-read命令 || exit

# 声明一个数组
declare -a line_array

# ------------------------------------------
# 🔴IFS=
#   清空 IFS，确保 read 读取每行时保留前后空格。
# 🔴-r
#   防止反斜杠转义
# ------------------------------------------
while IFS= read -r line; do
    # 将读取到的每一行添加到数组中
    line_array+=("${line}")
done < 00-file.txt

# 输出数组内的元素
for element in "${line_array[@]}"; do
  echo "$element"
done