#!/usr/bin/env bash

# ---------------------------------------------------------------------------------------------------
# ⏹read命令读取的值，默认是以空格分隔。
# 可以通过自定义环境变量IFS（内部字段分隔符，Internal Field Separator 的缩写），修改分隔标志。
# 
# ⏹IFS的默认值是
#            空格
#            Tab
#            换行符
# 通常取空格作为默认值
# 
# ⏹如果把IFS定义成冒号 : 或 分号 ;
# 就可以获取以这两个符号分隔的值，这对读取文件很有用。
# ---------------------------------------------------------------------------------------------------
cd 06-read命令 || exit

# 存储密码的文件路径
password_file_path=./00-passwd.txt

# ⏹根据输入的用户名称，通过grep命令查找对应的信息
read -r -p "请输入想查找的用户名称 > " user_name
file_info="$(grep "^${user_name}:" ${password_file_path})"

# 当搜索的用户名存在的情况
if [ -n "$file_info" ]; then
    # --------------------------------------------------------------------------------------
    # 🔴1. 因为获取到的行数据是以 : 分隔的，所以设置 IFS=":"
    # 🔴2. read -r user _ uid gid name home shell <<< "$file_info"
    #    将 grep 到的数据给read读取，将读取到的数据(已经用 : 分隔完毕)依次放到对应的变量中
    #    如果有部分字段并未使用，需要忽略，使用 _
    # 🔴3. IFS的赋值命令和read命令写在一行，
    #    这样的话，IFS的改变仅对后面的命令生效，该命令执行后IFS会自动恢复原来的值。
    # --------------------------------------------------------------------------------------
    IFS=":" read -r user _ uid gid name home shell <<< "$file_info"

    echo "用户名 -> $user"
    echo "UID -> $uid"
    echo "GID -> $gid"
    echo "Full Name -> $name"
    echo "家目录 -> $home"
    echo "shell -> $shell"
else
    echo -e "当前用户不存在 ==> \e[1;31m $user_name \e[0m"
    exit 1
fi

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# --------------------------------------------------------------------------------------
# ⏹如果IFS设为空字符串，就等同于将整行读入一个变量。
# --------------------------------------------------------------------------------------
while IFS= read -r line; do
    echo "$line"
done < "$password_file_path"