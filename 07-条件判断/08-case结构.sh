#!/usr/bin/env bash

# ---------------------------------------------------------------------------------------------------
# ⏹case结构
# 用于多值判断，可以为每个值指定对应的命令，跟包含多个elif的if结构等价，但是语义更好。
# 
# ⏹语法如下
# case expression in
#   pattern )
#     commands ;;
#   pattern )
#     commands ;;
#   ...
# esac
# ---------------------------------------------------------------------------------------------------

# -----------------------------------------------------------------
# 👉Bash 4.0之前，case结构只能匹配一个条件，然后就会退出case结构。👈
# -----------------------------------------------------------------

echo -n '输入一个1到3之间的数字 > '
# 等待用户输入内容
read -r character

# ⏹使用case来进行条件判断
case "$character" in
    1 )
        echo -e "用户输入了\e[1;31m $character \e[0m"
        ;;
    2 )
        echo -e "用户输入了\e[1;31m $character \e[0m"
        ;;
    3 )
        echo -e "用户输入了\e[1;31m $character \e[0m"
        ;;
    # 当用户输入的内容不在1到3的范围内，进入到此分支
    * )
        echo '输入不符合规范, 请输入1到3之间的数字'
        ;;
esac

# 获取当前的用户名
OS=$(uname -s)

case "$OS" in
    FreeBSD ) 
        echo "This is FreeBSD" 
        ;;
    Darwin ) 
        echo "This is Mac OSX" 
        ;;
    AIX ) 
        echo "This is AIX" 
        ;;
    Minix )
        echo "This is Minix" 
        ;;
    Linux ) 
        echo "This is Linux" 
        ;;
    MINGW64_NT-10.0-19041 )
        echo "哈哈,我自己的电脑" 
        ;;
    * ) 
        echo "Failed to identify this OS"
        ;;
esac

# ---------------------------------------------------------------------------------------------------
# ⏹case的匹配模式可以使用各种通配符
#   a)
#     匹配a
#   a|b)
#     匹配a或b
#   [[:alpha:]])
#     匹配单个字母。
#   ???)
#     匹配3个字符的单词。
#   *.txt)
#     匹配.txt结尾。
#   *)
#     匹配任意输入，通常作为case结构的最后一个模式。
# ---------------------------------------------------------------------------------------------------
echo -n "输入一个字母或数字 > "
read -r character

# ⏹case结合匹配模式来使用
case $character in
    # 当输入的是大写或者小写字母的时候
    [[:lower:]] | [[:upper:]] )
        echo -e "输入了字母\e[1;31m $character \e[0m"
        ;;
    # 当输入的是数字的时候
    [0-9] )
        echo -e "输入了数字\e[1;31m $character \e[0m"
        ;;
    * )                      
        echo "输入不符合要求"
        ;;
esac

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# -----------------------------------------------------------------------------
# 👉Bash 4.0之后，case结构可以匹配多个条件，这时可使用 ;;& 终止每个条件块。👈
# -----------------------------------------------------------------------------

read -r -n 1 -p "👉输入一个字母或数字👈 > "
echo
# 因为read命令后面没有变量名来接收用户输入的变量，环境变量REPLY会自动存储用户所输入的内容
case $REPLY in
    [[:upper:]] )
        echo "$REPLY 是一个大写字母." 
        # 匹配到大写字母之后还想继续匹配，就在 ;; 后面加一个 &
        ;;&
    [[:lower:]] )    
        echo "$REPLY 是一个小写字母." 
        ;;&
    [[:alpha:]] )    
        echo "$REPLY 是一个字母字符."
        # 匹配到字母字符之后就不再继续匹配，就使用 ;; 了
        # 范围大的匹配要放到最后兜底
        ;;
    [0-5] )
        echo "$REPLY 在0到5的范围内." 
        ;;&
    [[:digit:]] )
        echo "$REPLY 是一个数字." 
        ;;
    [[:space:]] )
        echo "$REPLY 是一个空格." 
        ;;
    * )
       echo "你这是输入了个啥？ ---> '$REPLY'." 
       ;;
esac