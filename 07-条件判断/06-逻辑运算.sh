#!/usr/bin/env bash

# ---------------------------------------------------------------------------------------------------
# ⏹逻辑运算
# 在bash中，三种逻辑运算AND，OR，和NOT，都有自己的专用符号。
#
# AND运算
#       &&
# OR运算
#       ||
# NOT运算
#       !
# ---------------------------------------------------------------------------------------------------

# 范围变量
MIN_VAL=1
MAX_VAL=100

# 待判断的数值
INT=50

# 判断INT变量是否是一个数值(支持负数)
if [[ "$INT" =~ ^-?[0-9]+$ ]]; then
    # 判断INT变量的值是否在指定的范围内
    if [[ $INT -ge $MIN_VAL ]] && [[ $INT -le $MAX_VAL ]]; then
        echo "$MAX_VAL > $INT > $MIN_VAL"
    else
        echo "$INT 不在 $MIN_VAL 和 $MAX_VAL 的范围内"
    fi
else 
    echo "INT变量的值并不是一个整数..."
fi

INT=200

# -------------------------------------------------------------------------------------
# ⏹取反 !  { ...; }
# 1. { ... } 将内部的 [ $INT -ge $MIN_VAL ] && [ $INT -le $MAX_VAL ] 组合成一个单独的命令块。
# 在当前的shell中执行
# 2. ! 逻辑非操作符将 { ... } 中命令块的执行结果取反。
# 3. { ...; } 语法规则
#        { ... } 内的最后一个命令之后必须有一个分号或换行。
# -------------------------------------------------------------------------------------
if ! { [ $INT -ge $MIN_VAL ] && [ $INT -le $MAX_VAL ]; } then
    echo "$INT 不在 $MIN_VAL 和 $MAX_VAL 的范围内"
else
    echo "$MAX_VAL > $INT > $MIN_VAL"
fi

# -------------------------------------------------------------------------------------
# 💥不推荐下面这种写法
# 1. ( ... )：将多个命令组合成一个子 Shell
# 2.  Shell 中的变量和环境变化不会影响到外部 Shell。
# -------------------------------------------------------------------------------------
# shellcheck disable=SC2235
# Use { ..; } instead of (..) to avoid subshell overhead.
if ! ( [ $INT -ge $MIN_VAL ] && [ $INT -le $MAX_VAL ] ); then
    echo "$INT 不在 $MIN_VAL 和 $MAX_VAL 的范围内"
else
    echo "$MAX_VAL > $INT > $MIN_VAL"
fi

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# ---------------------------------------------------------------------------------------------------
# ⏹普通命令的逻辑运算
# 可以使用 Bash 的命令控制操作符&&（AND）和||（OR），进行多个命令的逻辑运算。
# 
# command1 && command2
# command1 || command2
# ---------------------------------------------------------------------------------------------------

# ⏹如果 temp 文件夹存在的话，就执行删除命令
ls -ld ./temp && rm -r ./temp
# ------------------------------------------------
# ⏹如果 temp 文件夹不存在的话，就执行创建命令。
# 文件夹创建成功之后，进入到文件夹之后后，再执行pwd命令
# ------------------------------------------------
([ -d ./temp ] || mkdir ./temp) && (cd ./temp  && pwd)
# 睡眠2秒钟之后，删除创建的文件夹
sleep 2; rm -r ./temp

# ⏹当日的作业文件夹的路径
folder_path=./tmp/$(date '+%Y%m%d')_db
# ⏹如果当日的作业文件夹不存在的话，就创建
[ -d "$folder_path" ] || (mkdir -p "$folder_path" && ls -ld "$folder_path")
# 睡眠2秒钟之后，删除创建的文件夹
sleep 2; rm -r ./tmp
