#!/usr/bin/env bash

# ---------------------------------------------------------------------------------------------------
# ⏹while循环
# while循环有一个判断条件，只要符合条件，就不断循环执行指定的语句。
#
# while condition; do
#   commands
# done
# ---------------------------------------------------------------------------------------------------

number=0

# 只要变量$number小于10，就会不断加1，直到$number等于10，然后退出循环。
# lt 是 < 的意思
while [ "$number" -lt 10 ]; do
    echo "Number = $number"
    number=$((number + 1))
done

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

number=0
# ⏹关键字do可以跟while不在同一行，这时两者之间不需要使用分号分隔。
while [ "$number" -lt 10 ]
do
    echo "Number = $number"
    number=$((number + 1))
done

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# ---------------------------------------------------------------------------------------------------
# ⏹until循环
# until循环与while循环恰好相反，只要不符合判断条件（判断条件失败），就不断循环执行指定的语句。
# 一旦符合判断条件，就退出循环。
#
# until condition; do
#   commands
# done
#
# 💥一般来说，until用得比较少，完全可以统一都使用while。
# ---------------------------------------------------------------------------------------------------

number=0
# ge 是 >= 的意思
until [ "$number" -ge 10 ]; do
    echo "Number = $number"
    number=$((number + 1))
done