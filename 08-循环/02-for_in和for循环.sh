#!/usr/bin/env bash

# ---------------------------------------------------------------------------------------------------
# ⏹for...in 循环
# for...in循环用于遍历列表的每一项。
#
# for variable in list; do
#   commands
# done
# ---------------------------------------------------------------------------------------------------

for num in {1..3}; do
    echo "$num"
done

# 进行当前文件夹
cd 08-循环 || exit

# ⏹列表可以由通配符和子命令产生
sh_file_count=0
for file_name in $(echo *.sh); do
    sh_file_count=$((sh_file_count + 1))
    echo "当前文件名为: $file_name"
done
echo "当前文件夹下的.sh文件总数为: $sh_file_count"

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

test_func() {

    # ------------------------------------------------------
    # ⏹in list的部分可以省略，这时list默认等于脚本的所有参数 $@
    # 但是，为了可读性，最好还是不要省略
    # ------------------------------------------------------
    for param; do
        echo "$param"
    done

    echo '========================='

    # ------------------------------------------------------
    # ⏹没有省略 in list 的for 循环
    # ------------------------------------------------------
    for param in "$@" ; do
        echo "$param"
    done

    echo 'hello world!'
}

test_func param1 param2 param3

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# ------------------------------------------------------
# ⏹和其他编程语言一样，sh中的for循环也可以向下面这样写
# 💥注意：(()) 中的 变量不需要加 $符号
# ------------------------------------------------------
loop_count=5
for (( i=0; i<loop_count; i=i+1 )); do
    echo "当前的数字是: $i"
done

# 循环
echo "====================="
arr=(aa bb cc dd)
for ((i=0;i<${#arr[@]};i++)); do
    echo "element is ${arr[i]}"
done
echo "====================="

# ------------------------------------------------------
# ⏹for条件部分的三个语句，都可以省略。
# 此时的for循环和while循环作用相同
# ------------------------------------------------------
for ((;;)); do
    read -r var
    if [ "$var" = "." ]; then
        # 🔴bash脚本中同样也支持break和continue语句
        echo '用于终于输入了 .'
        echo '程序终止'
        break
    fi
done
