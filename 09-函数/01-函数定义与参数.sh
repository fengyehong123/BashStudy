#!/usr/bin/env bash

# ---------------------------------------------------------------------------------------------------
# ⏹函数简介
# 1. 函数（function）是可以重复使用的代码片段，有利于代码的复用。
#    它与别名（alias）的区别是，别名只适合封装简单的单个命令，函数则可以封装复杂的多行命令。
#
# 2. 在执行脚本时，Bash 会新建一个子 Shell 执行脚本。但是函数总是在当前 Shell 执行。
#    如果函数与脚本同名，函数会优先执行。
#
# 3. 函数的优先级不如别名，即如果函数与别名同名，那么别名优先执行。
# ---------------------------------------------------------------------------------------------------

# ⏹函数定义方式1
func1() {
    if [[ -n "$1" ]]; then
        echo -e "我接收到了参数，参数值为: \e[1;31m $1 \e[0m"
    fi
    echo '我是func1函数'
}

# ⏹函数定义方式2
function func2() {
    echo '我是func2函数'
    echo -n "今天的日期是: "
    date '+%Y-%m-%d'
}

# 含数调用
func1 参数1
func2

# ---------------------------------------------------------------------------------------------------
# ⏹函数参数
# 函数的参数变量，与脚本参数变量是一致的。
#
# $1~$9
#      函数的第一个到第9个的参数。
#      如果函数的参数多于9个，那么第10个参数可以用${10}的形式引用，以此类推。
# $0
#      函数所在的脚本名。
# $#
#      函数的参数总数。
# $@
#      函数的全部参数，参数之间使用空格分隔。
# $*
#      函数的全部参数，参数之间使用变量$IFS值的第一个字符分隔
#      默认为空格，但是可以自定义。
# ---------------------------------------------------------------------------------------------------

function print_param() {

    for param in "$@"; do
        echo "$param"
    done
}

# 生成要传递的参数数组
param_arry=( {1..5} )
# 在调用函数的同时传递若干个参数
print_param "${param_arry[@]}"

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/\e[0m"

# 在调用函数的同时传递若干个参数
print_param {1..3}