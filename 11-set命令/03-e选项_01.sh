#!/usr/bin/env bash

# ----------------------------------------------------------------------------------------------------
# ⏹Bash 的错误处理
# 1. 脚本里面有运行失败的命令（返回值非0），Bash 默认会继续执行后面的命令。
# 2. Bash的默认行为很不利于脚本安全和除错。实际开发中，如果某个命令失败，往往需要脚本停止执行，防止错误累积。
# 3. 一般采取下面这种写法
#    command || exit 1
#
# ⏹如果停止执行之前需要完成多个操作，就要采用下面三种写法。
# 
# 🔴方式1
# command || { echo "命令执行失败..."; exit 1; }
#
# 🔴方式2
# if ! command; then 
#    echo "命令执行失败..."; 
#    exit 1;
# fi
#
# 🔴方式3
# command
# if [ "$?" -ne 0 ]; then 
#    echo "命令执行失败..."; 
#    exit 1; 
# fi
# ----------------------------------------------------------------------------------------------------

# -------------------------------------------------------------
# ⏹上面这些写法多少有些麻烦，容易疏忽。
# set -e 从根本上解决了这个问题，它使得脚本只要发生错误，就终止执行。
# -e 还有另外一种写法 ⇒ set -o errexit
# -------------------------------------------------------------

# 开启设置，当脚本发生错误就停止执行
set -e
echo 'Hello World!'

# -------------------------------------------------------------
# set -e根据返回值来判断，一个命令是否运行失败。
# 但是，某些命令的非零返回值可能不表示失败，
# 或者开发者希望在命令失败的情况下，脚本继续执行下去。
# 这时可以暂时关闭set -e，该命令执行结束后，再重新打开set -e。
# -------------------------------------------------------------
set +e
# 此处 command1 和 command2 命令虽然并不存在，但是脚本会继续执行
command1
command2

# 由于开启了脚本发生错误就停止执行的设置，所以 command3 之后的命令并不会执行
set -e
command3
command4

echo '你好 世界!'