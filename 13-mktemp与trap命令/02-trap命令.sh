#!/usr/bin/env bash

# ----------------------------------------------------------------------------------------------------
# ⏹trap命令
# 用来在 Bash 脚本中响应系统信号。
#
# ⏹trap的命令格式如下
# trap [动作] [信号1] [信号2] ...
#
# 【动作】是一个Bash命令，【信号】常用的有以下几个
#       HUP：编号1，脚本与所在的终端脱离联系。
#       INT：编号2，用户按下 Ctrl + C，意图让脚本终止运行。
#       QUIT：编号3，用户按下 Ctrl + 斜杠，意图退出脚本。
#       KILL：编号9，该信号用于杀死进程。
#       TERM：编号15，这是kill命令发出的默认信号。
#       EXIT：编号0，这不是系统信号，而是 Bash 脚本特有的信号，不管什么情况，只要退出脚本就会产生。
#       ERR：是在脚本中发生非零退出状态时触发的
# ----------------------------------------------------------------------------------------------------

# ------------------------------------------------------
# 🔴trap命令必须放在脚本的开头。
#    否则，它上方的任何命令导致脚本退出，都不会被它捕获。
# 🔴如果对同一信号设置多个 trap，只有最后一个会生效。
# ------------------------------------------------------

# 因为有两个 trap 命令同时对 EXIT 捕获信号，只有最后一个trap才会生效
trap 'echo 我不会被打印在控制台上！' EXIT
trap 'rm -f "$TMPFILE";echo 临时文件 $TMPFILE 被删除...' EXIT

# 当 ERR 发生的时候，用来触发多个命令的函数
function error_handle {
    echo '错误1。。。。'
    echo '错误2。。。。'
    echo '错误3。。。。'
}

# 🔴如果trap需要触发多条命令，可以封装一个 Bash 函数。
trap error_handle ERR

# 创建一个临时文件，当脚本退出时，删除该临时文件
TMPFILE=$(mktemp) || exit 1
echo "创建的临时文件的路径 $TMPFILE"

# 定义的函数
function my_func() {
    # 尝试执行一个不存在的命令
    not_exit_command
}

# 调用函数，由于函数内尝试调用不存在的命令，因此会报错
my_func