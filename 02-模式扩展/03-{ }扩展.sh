#!/usr/bin/env bash

# --------------------------------------------------------------------------------
# ⏹{ }
# 1. 大括号扩展{...}表示分别扩展成大括号里面的所有值，各个值之间使用逗号分隔。
# 2. 大括号扩展不是文件名扩展。它会扩展成所有给定的值，而不管是否有对应的文件存在。
# --------------------------------------------------------------------------------

# 🔴扩展之后的文件，实际上不存在
echo {1,4,5}_01.txt | xargs -n 1
# 1_01.txt
# 4_01.txt
# 5_01.txt

# 🔴配合扩展，批量创建文件
touch {1,4,5}_01.txt
# 睡眠2秒
sleep 2
# 删除，批量创建的脚本
rm {1,4,5}_01.txt

# shellcheck disable=SC1083
# 🔴大括号内部的逗号前后不能有空格，否则大括号扩展会失效
echo {a,b, 5}_01.txt
# {a,b, 5}_01.txt

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# 🔴逗号前面可以没有值，表示扩展的第一项为空。
echo /home/work/person{,0506,0507}.log | xargs -n 1
# /home/work/person.log
# /home/work/person0506.log
# /home/work/person0507.log

# 🔴大括号可以嵌套
echo my_file.{j{p,pe}g,png} | xargs -n 1
# my_file.jpg
# my_file.jpeg
# my_file.png

# 🔴大括号可以用于多字符的模式，但是方括号只能匹配单字符
echo info_{per{son1,son2},apple,water}.csv | xargs -n 1

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# --------------------------------------------------------------------------------
# ⏹{start..end} 扩展
# 大括号扩展有一个简写形式{start..end}，表示扩展成一个连续序列
# --------------------------------------------------------------------------------

echo {a..c}  # a b c
echo d{a..d}g  # dag dbg dcg ddg
echo {1..4}  # 1 2 3 4
echo Number_{1..3}  # Number_1 Number_2 Number_3

# 🔴支持逆序
echo {c..a}  # c b a
echo {3..1}  # 3 2 1

# 🔴如果遇到无法理解的简写，大括号就会原样输出，不会进行扩展
echo {a1..3c}  # {a1..3c}

# 🔴可以嵌套使用，形成复杂的扩展
echo .{mp{3..4},m4{a,b,p,v}} | xargs -n 1
# .mp3
# .mp4
# .m4a
# .m4b
# .m4p
# .m4v

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# --------------------------------------------------------------------------------
# ⏹新建一系列目录 和 文件
# --------------------------------------------------------------------------------

# 批量创建文件和文件夹
# 🔴多个简写连用，会有循环的效果
mkdir {2007..2009}-{01..12}
touch {2023..2024}{01..12}{01..31}_PAY_INFO_MSG.csv

# 睡眠4秒
sleep 4

# 🔴批量删除创建的文件和文件夹
rm -r {2007..2009}-{01..12}
rm {2023..2024}{01..12}{01..31}_PAY_INFO_MSG.csv

# --------------------------------------------------------------------------------
# ⏹直接用于for循环
# --------------------------------------------------------------------------------
for file_name in {1..4}_file.txt
do
  echo "当前输出的文件名字是: ${file_name}"
done
# 当前输出的文件名字是: 1_file.txt
# 当前输出的文件名字是: 2_file.txt
# 当前输出的文件名字是: 3_file.txt
# 当前输出的文件名字是: 4_file.txt

# 🔴可以使用第二个双点号（start..end..step），用来指定扩展的步长。
echo {0..8..2}  # 0 2 4 6 8