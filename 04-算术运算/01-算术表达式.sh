#!/usr/bin/env bash

# ---------------------------------------------------------------------------------------------------
# ⏹算术表达式
# ((...))语法可以进行整数的算术运算。
# ---------------------------------------------------------------------------------------------------
((var1=1+29))
echo "${var1}"  # 30

# 🔴((...))会自动忽略内部的空格
(( var2 = 10 + 15 ))
echo "${var2}"  # 25

# ----------------------------------------------------------------------
# ⏹命令执行的结果根据算术运算的结果而定。
# 只要算术结果不是0，命令就算执行成功。
# ----------------------------------------------------------------------
# 🔴算术结果不是0，命令就算执行成功。
(( 3 + 2 ))
echo $?  # 0
# 🔴算术结果是0，命令就算执行失败。
(( 3 - 3 ))
echo $?  # 1

# ----------------------------------------------------------------------
# ⏹读取算术运算的结果
# 在((...))前面加上美元符号$((...))，使其变成算术表达式，返回算术运算的值。
# ----------------------------------------------------------------------
echo $((100 + 200))  # 300

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# ---------------------------------------------------------------------------------------------------
# ⏹((...))语法支持的算术运算符如下
#    +：加法
#    -：减法
#    *：乘法
#    /：除法（整除）
#    %：余数
#    **：指数
#    ++：自增运算（前缀或后缀）
#    --：自减运算（前缀或后缀）
# ---------------------------------------------------------------------------------------------------
# 🔴除法运算符的返回结果总是整数
echo $((5 / 2))  # 2

# 🔴$((...))内部可以用圆括号改变运算顺序
echo $(( (2 + 3) * 4 ))  # 20

# 🔴$((...))结构可以嵌套
# 下面这两种写法相同
echo $(((5**2) * 3))  # 75
echo $(($((5**2)) * 3))  # 75

# 🔴((...))的算术表达式只能计算整数，否则会报错
# echo $((1.5 + 1))
# (( )) doesn't support decimals. Use bc or awk.

# $((...))的圆括号之中，不需要在变量名之前加上$，不过加上也不报错。
num1=2
echo $((num1 + 1))  # 3
# shellcheck disable=SC2004
echo $(($num1 + 1))  # 3

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# ---------------------------------------------------------------------------------------------------
# ⏹((...))中的字符串
# 如果
#    在$((...))里面使用字符串，Bash 会认为那是一个变量名。
# 如果
#    不存在同名变量，Bash 就会将其作为空值，因此不会报错。
# ---------------------------------------------------------------------------------------------------

# "hello"会被当作变量名，返回空值，而$((...))会将空值当作0
# 也就是说相当于 0 + 2 = 2
echo $(( "hello" + 2))  # 2
# 相当于 0 * 2 = 0
echo $(( "hello" * 2))  # 0

var1=10
var2=var1
# var2变量的值是 var1变量
echo $(( var2 + 2 ))  # 12

# 可以根据var1的值写出动态替换的代码
var1="20000"
echo $(( var2 + 2 ))  # 20002