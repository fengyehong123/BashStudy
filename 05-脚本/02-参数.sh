#!/usr/bin/env bash

# ---------------------------------------------------------------------------------------------------
# ⏹脚本内部可以使用特殊变量，引用调用脚本时传递的参数
#     $0
#       脚本文件名，即script.sh。
#     $1~$9
#       对应脚本的第一个参数到第九个参数。
#     $#
#       参数的总数。
#     $@
#       全部的参数，参数之间使用空格分隔。
#     $*
#       全部的参数，参数之间使用变量$IFS值的第一个字符分隔，默认为空格，但是可以自定义。
#
# 💥注意事项
# 1. 如果脚本的参数多于9个，那么第10个参数可以用${10}的形式引用，以此类推。
# 2. 如果命令是 command -o param1 param2，那么 -o 是$1，param1是$2，param2是$3。
# ---------------------------------------------------------------------------------------------------

# 定义一个函数
get_category_info() {

    echo "参数的总数量是: $#"  # 参数的总数量是: 3
    echo "全部的参数是: " "$@"  # 全部的参数是:  param1 param2 param3

    echo "第一个参数是: $1"  # 第一个参数是: param1
    echo "第二个参数是: $2"  # 第二个参数是: param2
    echo "第三个参数是: $3"  # 第三个参数是: param3

    echo "脚本的名称是: $0"  # 脚本的名称是: e:\My_Project\BashStudy\05-脚本\02-参数.sh
}
# 调用函数
get_category_info param1 param2 param3

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

my_func() {

    # 遍历传递给函数的参数
    # 此时 $@ 相当于一个数组
    for param in "$@"; do
        echo "$param"
    done
}
# 如果参数值之间有空格的话，需要使用引号给括起来
my_func '参数1' '参数 2' 100