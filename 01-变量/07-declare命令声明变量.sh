#!/usr/bin/env bash

# --------------------------------------------------------------------------------------------
# ⏹declare ：可以声明一些特殊类型的变量，为变量设置一些限制
# 
# 语法如下：
# declare OPTION VARIABLE=value
# 
# OPTION：
#   -a：声明数组变量。
#   -A: 声明关联数组。
#   -f：输出所有函数定义。
#   -F：输出所有函数名。
#   -i：声明整数变量。
#   -l：声明变量为小写字母。
#   -p：查看变量信息。
#   -r：声明只读变量。
#   -u：声明变量为大写字母。
#   -x：该变量输出为环境变量。
#
# ⛔注意点：
# 1. declare命令如果用在函数中，声明的变量只在函数内部有效，等同于local命令。
# 2. 不带任何参数时，declare命令输出当前环境的所有变量，包括函数在内，等同于不带有任何参数的set命令。
# --------------------------------------------------------------------------------------------

# ----------------------------------------------------------------------------------------------------------------
# ⏹-i参数
# -i参数声明整数变量以后，可以直接进行数学运算。
# ----------------------------------------------------------------------------------------------------------------

# 声明2个变量
var1='10'
var2='20'

unset result1

# shellcheck disable=SC2125
# ----------------------------------------------------------------
# ⏹参与运算的3个变量都没有声明类型，因此$var1*$var2 会被当做字面量
# 不会进行整数运算
# ----------------------------------------------------------------
result1=$var1*$var2
echo "${result1}"  # var1*var2

# 使用 declare 命令声明一个整数变量
declare -i result2

# shellcheck disable=SC2125
# ----------------------------------------------------------------
# ⏹result2的类型是整数，$var1*$var2 会自动解释为整数运算
# ----------------------------------------------------------------
result2=$var1*$var2
echo "${result2}"  # 200

# ----------------------------------------------------------------
# ⏹$(( )) 是用于执行算术运算的运算符，可以在其中进行整数运算。
# Bash 的 $(( )) 机制支持各种基本的数学运算符和表达式。
# ----------------------------------------------------------------
result3=$((var1*var2))
echo "${result3}"  # 200

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# ----------------------------------------------------------------------------------------------------------------
# ⏹-x参数
# -x参数等同于export命令，可以输出一个变量为子 Shell 的环境变量。
# ----------------------------------------------------------------------------------------------------------------
# 下面这两种写法等效
declare -x test_var1
export test_var1

# ----------------------------------------------------------------------------------------------------------------
# ⏹-r参数
# -r参数可以声明只读变量，无法改变变量值，也不能unset变量。
# 相当于 readonly 命令
# ----------------------------------------------------------------------------------------------------------------
declare -r var3=1000
echo "${var3}"

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# ----------------------------------------------------------------------------------------------------------------
# ⏹-u参数：声明变量为大写字母，可以自动把变量值转成大写字母。
# ⏹-l参数：声明变量为小写字母，可以自动把变量值转成小写字母。
# ----------------------------------------------------------------------------------------------------------------
declare -u var4='hello'
echo "转换之后的大写字母为: ${var4}"  # 转换之后的大写字母为: HELLO

declare -l var5='WORLD'
echo "转换之后的小写字母为: ${var5}"  # 转换之后的小写字母为: world

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# ----------------------------------------------------------------------------------------------------------------
# ⏹-a参数：声明数组，并初始化值
# ----------------------------------------------------------------------------------------------------------------
declare -a fruits=('苹果' '香蕉' '草莓')
# 数组中添加元素
fruits[3]='西瓜'
echo "数组中的所有元素为:" "${fruits[@]}"

# ----------------------------------------------------------------------------------------------------------------
# ⏹-A参数：声明关联数组，并初始化值
# ----------------------------------------------------------------------------------------------------------------
declare -A personMap=(
    [name]="贾飞天"
    [age]=18
    [address]='地球'
)
# 获取关联数组中的所有值
echo "${personMap[@]}" | xargs -n 1
# 地球
# 18
# 贾飞天