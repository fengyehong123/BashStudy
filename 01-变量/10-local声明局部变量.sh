#!/usr/bin/env bash

name1='李四'
name2='张三'

my_func() {

    name1='贾飞天'
    # --------------------------------------------------------------------------------
    # ⏹定义函数内部的局部变量
    # 虽然和函数外部的局部变量同名，但是外部的全局变量不会影响到内部的局部变量
    # 同样，内部定义的局部变量也不会影响到外部
    # --------------------------------------------------------------------------------
    local name2='枫叶红'
    # 只在函数内部定义的变量，不会影响到外部
    local address='M78星云'

    echo "函数内部的变量: ${name1} 和 ${name2} 和 ${address}"
}

echo "函数外部的变量: ${name1} 和 ${name2}"  # 函数外部的变量: 李四 和 张三

# 调用函数
my_func
# 函数内部的变量: 贾飞天 和 枫叶红 和 M78星云

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/\e[0m"

# --------------------------------------------------------------------------------
# ⏹可以看到，虽然 my_func 函数的内部使用 local 定义了变量
# 但是作用域只在函数的内部，并不会影响到全局作用域
# ! 在bash中用来取反
# --------------------------------------------------------------------------------
if [ ! -v address ]; then
    echo "变量 address 未定义"
    echo "函数外部的变量: ${name1} 和 ${name2}"
    # 变量 address 未定义
    # 函数外部的变量: 贾飞天 和 张三
else 
    echo "变量 address 已定义，值为：${address}"
fi

