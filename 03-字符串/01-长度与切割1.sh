#!/usr/bin/env bash

# --------------------------------------------------------------------------------
# ⏹获取字符串长度
# ${#varname}
# 大括号{}是必需的，否则 Bash 会将$#理解成脚本的参数个数，将变量名理解成文本。
# --------------------------------------------------------------------------------
var1='Hello World'
echo "字符串的长度为: ${#var1}"  # 字符串的长度为: 11

# --------------------------------------------------------------------------------
# ⏹字符串切割
# ${varname:offset:length}
# 获取从位置offset开始（从0开始计算），长度为length的字符串
# 这种语法不能直接操作字符串，只能通过变量的方式来读取字符串
# --------------------------------------------------------------------------------
var2='你好，世界'

# 🔴从下标为1的文字开始切割，向后获取3个字符
echo "切割之后的字符串为: ${var2:1:3}"  # 切割之后的字符串为: 好，世
# 🔴源字符串不会受到影响
echo "${var2}"  # 你好，世界
# 🔴如果省略了length，则会一直截取到字符串的结尾
echo "${var2:3}"  # 世界

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# --------------------------------------------------------------------------------
# ⏹字符串切割
# 如果offset为负值，表示从字符串的末尾开始算起。注意，负数前面必须有一个空格， 
# 以防止与${variable:-word}的变量的设置默认值语法混淆。
# 这时还可以指定length，length可以是正值，也可以是负值（负值不能超过offset的长度）。
# --------------------------------------------------------------------------------
foo="This string is long."
# 🔴从倒数第5个文字开始截取到最后（获取最后5个文字）
echo "${foo: -5}"  # long.
# 🔴从倒数第5个文字开始截取，向后截取3个文字
echo "${foo: -5:3}"  # lon
# 🔴从倒数第5个文字开始截取，排除从字符串末尾开始的2个文字
echo "${foo: -5:-2}"  # lon

