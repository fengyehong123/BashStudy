#!/usr/bin/env bash

string="Hello World"
substring="World"

# --------------------------------------------------------------------------------
# ⏹字符串包含用法
# --------------------------------------------------------------------------------
# 🔴正确的包含用法，检查 $string 字符串是否包含 $substring 字符串
if [[ $string =~ $substring ]]; then
    echo '字符串包含'
fi
# 🔴错误的用法，$substring 并不包含 $string 字符串
if [[ $substring =~ $string ]]; then
    echo '-----------------错误的用法---------------------'
fi

echo -e "\e[1;31m/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_分割线_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_\e[0m"

# --------------------------------------------------------------------------------
# ⏹字符串转换大小写
# --------------------------------------------------------------------------------
var1='HellO'
var2='World'

# 🔴转换为小写
echo "${var1,,}"  # hello
# 🔴转换为大写
echo "${var2^^}"  # WORLD

# --------------------------------------------------------------------------------
# ⏹去除字符串前后两端的空白
# --------------------------------------------------------------------------------
var3='  Hello World  '
echo "空白去除之前: [$var3]"  # 空白去除之前: [  Hello World  ]

# 1. 去除空格方式：使用 xargs 命令
trimmed1=$(echo "$var3" | xargs)
echo "空白去除之后1: [$trimmed1]"  # 空白去除之后1: [Hello World]

# 2. 进一步优化，xargs 支持直接读取变量，因此我们可以直接通过标准输入传递变量
trimmed2=$(xargs <<< "$var3")
echo "空白去除之后2: [${trimmed2}]"  # 空白去除之后2: [Hello World]

# 3. 还可以使用 awk 命令来去除
trimmed3=$(awk '{$1=$1; print}' <<< "$var3")
echo "空白去除之后3: [${trimmed3}]"  # 空白去除之后3: [Hello World]